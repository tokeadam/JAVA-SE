package gui;

import java.awt.Frame;
import java.sql.SQLException;
import java.util.List;
import java.util.Map;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import model.IModel;
import model.Rendeles;
import model.Szemely;

public class MegrendelesekDialog extends javax.swing.JDialog implements TableModelListener {

    private IModel model;
    private Frame parent;
    private List<Szemely> szemelyek;
    private List<Rendeles> megrendelesek;
    private Map<Integer, Szemely> szemelyekMap;
    private DefaultTableModel dtm;

    public MegrendelesekDialog(java.awt.Frame parent, boolean modal, IModel model) {
        super(parent, modal);
        initComponents();

        setLocationRelativeTo(parent);
        setTitle("Megrendelések adminisztrálása");
        this.model = model;
        this.parent = parent;

        dtm = (DefaultTableModel) tblRendelesek.getModel();
        dtm.addTableModelListener(this);
        try {
            szemelyek = model.getAllSzemely();
            szemelyekMap = model.getSzemelyMap();
            cbMegrendelo.setModel(new DefaultComboBoxModel<>(szemelyek.toArray()));
//           cbMegrendelo.removeAllItems();
//           for (Szemely sz : szemelyek) {
//                cbMegrendelo.addItem(sz);
//            }
            btnOsszesActionPerformed(null);

        } catch (SQLException ex) {
            Foablak.hibaAblak(ex.toString());
        }
    }

    public void tablaFrissit() {
        dtm.getDataVector().clear();
        dtm.fireTableDataChanged();

        for (Rendeles megr : megrendelesek) {
            Vector sor = new Vector();
            //sor.add(megr.getRendeloId());
            //Szemely megrendelo = model.getSzemelyByID(megr.getRendeloId());  //mindig a db-ből kérdez
            Szemely megrendelo = szemelyekMap.get(megr.getRendeloId());
            sor.add(megrendelo.getNev());
            sor.add(megr.getOsszeg());
            sor.add(megr.getDarabszam());
            sor.add(megr.isTeljesitve());

            dtm.addRow(sor);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblRendelesek = new javax.swing.JTable();
        btnUj = new javax.swing.JButton();
        btnTorles = new javax.swing.JButton();
        btnOK = new javax.swing.JButton();
        btnSzerkeszt = new javax.swing.JButton();
        cbMegrendelo = new javax.swing.JComboBox();
        btnOsszes = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        tblRendelesek.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null}
            },
            new String [] {
                "Megrendelő", "Összeg", "Darabszám", "Teljesítve"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblRendelesek.setRowHeight(20);
        tblRendelesek.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(tblRendelesek);

        btnUj.setText("Új");
        btnUj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUjActionPerformed(evt);
            }
        });

        btnTorles.setText("Törlés");
        btnTorles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTorlesActionPerformed(evt);
            }
        });

        btnOK.setText("OK");
        btnOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOKActionPerformed(evt);
            }
        });

        btnSzerkeszt.setText("Szerkeszt");
        btnSzerkeszt.setEnabled(false);

        cbMegrendelo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbMegrendelo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbMegrendeloActionPerformed(evt);
            }
        });

        btnOsszes.setText("Összes");
        btnOsszes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOsszesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cbMegrendelo, javax.swing.GroupLayout.PREFERRED_SIZE, 351, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnOsszes))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnUj)
                    .addComponent(btnSzerkeszt)
                    .addComponent(btnTorles)
                    .addComponent(btnOK))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnOK, btnSzerkeszt, btnTorles, btnUj});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbMegrendelo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnOsszes))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 410, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnUj)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSzerkeszt)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnTorles)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnOK)))
                .addGap(24, 24, 24))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnOsszesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOsszesActionPerformed
        try {
            cbMegrendelo.setSelectedIndex(-1);
            megrendelesek = model.getAllRendeles();
            tablaFrissit();
        } catch (SQLException ex) {
            Foablak.hibaAblak(ex.toString());
        }
    }//GEN-LAST:event_btnOsszesActionPerformed

    private void btnOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOKActionPerformed
        setVisible(false);
    }//GEN-LAST:event_btnOKActionPerformed

    private void cbMegrendeloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbMegrendeloActionPerformed
        Szemely megrendelo = (Szemely) cbMegrendelo.getSelectedItem();
        if (megrendelo != null) {
            try {
                megrendelesek = model.getAllRendeles(megrendelo);
                tablaFrissit();
            } catch (SQLException ex) {
                Foablak.hibaAblak(ex.toString());
            }
        }
    }//GEN-LAST:event_cbMegrendeloActionPerformed

    private void btnTorlesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTorlesActionPerformed
        int sor = tblRendelesek.getSelectedRow();
        if (sor >= 0) { //van kiválasztott megrendelés
            int valasz = JOptionPane.showConfirmDialog(parent, "Biztos, hogy törölni akarod?",
                    "Törlési megerőssítés", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (valasz == JOptionPane.YES_OPTION) {
                Rendeles kivalasztott = megrendelesek.get(sor);
                try {
                    model.removeRendeles(kivalasztott);
                    //megrendelesek = model.getAllRendeles();  //így is lehetne, de több idő lekérdezni az összes adatot mint egyet törölni a List-ből
                    megrendelesek.remove(kivalasztott);
                    tablaFrissit();
                } catch (SQLException ex) {
                    Foablak.hibaAblak(ex.toString());
                }

            }

        } else {
            Foablak.hibaAblak("Válassz ki egy sort a törléshez!");
        }


    }//GEN-LAST:event_btnTorlesActionPerformed

    private void btnUjActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUjActionPerformed
        Szemely megrendelo = (Szemely) cbMegrendelo.getSelectedItem(); //a kiválasztott megrendelő, ha nincs kiválasztva akkor null
        MegrendelesAdatokDialog mad = new MegrendelesAdatokDialog(parent, true, szemelyek, megrendelo);
        mad.setVisible(true);

        //itt mentjük az új megrendelést, ha mentés gombbal zárta be a dialógust...
        if (mad.isMentes()) {
            try {
                Rendeles megrendeles = mad.getRendeles();
                model.addRendeles(megrendeles);

                if (megrendelo != null) {
                    megrendelesek = model.getAllRendeles(megrendelo);
                } else {
                    megrendelesek = model.getAllRendeles();
                }
                tablaFrissit();
            } catch (SQLException ex) {
                Foablak.hibaAblak(ex.toString());
            }
        }
    }//GEN-LAST:event_btnUjActionPerformed

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnOK;
    private javax.swing.JButton btnOsszes;
    private javax.swing.JButton btnSzerkeszt;
    private javax.swing.JButton btnTorles;
    private javax.swing.JButton btnUj;
    private javax.swing.JComboBox cbMegrendelo;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblRendelesek;
    // End of variables declaration//GEN-END:variables

    @Override
    public void tableChanged(TableModelEvent e) {
        int sor = e.getFirstRow();
        int oszlop = e.getColumn();

        if (e.getType() == TableModelEvent.UPDATE && sor >= 0 && oszlop >= 0) {
            Rendeles kivalasztott = megrendelesek.get(sor);
            Object ujAdat = dtm.getValueAt(sor, oszlop);

            switch (oszlop) {
                case 1:
                    kivalasztott.setOsszeg((int) ujAdat);
                    break;
                case 2:
                    kivalasztott.setDarabszam((int) ujAdat);
                    break;
                case 3:
                    kivalasztott.setTeljesitve((boolean) ujAdat);
                    break;
            }
            try {
                model.updateRendeles(kivalasztott);
            } catch (SQLException ex) {
                Foablak.hibaAblak(ex.toString());
            }
        }
    }
}
